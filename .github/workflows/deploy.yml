name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  actions: read

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages-production"
  cancel-in-progress: false

jobs:
  pre-deploy-checks:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.checks.outputs.should-deploy }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      env:
        VITE_COUNTER_WORKSPACE: perhitsiksha
        VITE_ENVIRONMENT: production
      run: npm run test -- --run
      
    - name: Run linting
      run: npm run lint
      
    - name: Type check
      run: npx tsc --noEmit
      
    - name: Test build
      env:
        VITE_COUNTER_WORKSPACE: perhitsiksha
        VITE_ENVIRONMENT: production
        VITE_GA_MEASUREMENT_ID: ${{ secrets.GA_MEASUREMENT_ID }}
      run: npm run build
      
    - name: Deployment readiness check
      id: checks
      run: |
        echo "All pre-deployment checks passed"
        echo "should-deploy=true" >> $GITHUB_OUTPUT

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    if: needs.pre-deploy-checks.outputs.should-deploy == 'true'
    environment:
      name: production
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build for production
      env:
        VITE_COUNTER_WORKSPACE: perhitsiksha
        VITE_ENVIRONMENT: production
        VITE_GA_MEASUREMENT_ID: ${{ secrets.GA_MEASUREMENT_ID }}
      run: npm run build
      
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './dist'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: Post-deployment verification
      run: |
        echo "Verifying production deployment..."
        # Wait for deployment to be ready
        sleep 60
        # Health check
        curl -f ${{ steps.deployment.outputs.page_url }} || exit 1
        echo "Production deployment verified successfully!"
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "✅ Production deployment successful!"
        echo "URL: ${{ steps.deployment.outputs.page_url }}"
        # Integration point for notifications (Slack, email, etc.)
        
    - name: Rollback on failure
      if: failure()
      run: |
        echo "❌ Production deployment failed!"
        echo "Consider manual rollback if needed"
        # Could implement automatic rollback logic here

  post-deploy-monitoring:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: success()
    
    steps:
    - name: Wait for propagation
      run: sleep 120
      
    - name: Basic health monitoring
      run: |
        echo "Running post-deployment health checks..."
        # Check if site is responding
        response=$(curl -s -o /dev/null -w "%{http_code}" ${{ needs.build-and-deploy.outputs.url || 'https://www.perhitsiksha.org' }})
        if [ "$response" != "200" ]; then
          echo "Health check failed with HTTP $response"
          exit 1
        fi
        echo "Health check passed!"
        
    - name: Counter API verification
      run: |
        echo "Verifying Counter API integration..."
        # Test counter API endpoint
        curl -f "https://api.counterapi.dev/v2/perhitsiksha/perhitsiksha-visits" || echo "Counter API check failed but not critical"
        echo "Counter API verification completed"